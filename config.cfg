[general]
# DNS interface. Note that systemd-resolved may reserve port 53 on 127.0.0.53
# In this case certainly will error out and you will need to define the listening interface
# for example: ip = "127.0.0.1", instead of "0.0.0.0"
ip = "203.0.113.5"
debug = false
# Directory to store the certificate data
cert_dir = "certs"
# Check upstream domain for existence of a subdomain before acquiring a certificate for it
tls_upstream_check = true
# Filtering regexes for subdomains that we certainly do not want to get certificates for
tls_filters = [
  "first_regex",
  "second_regex",
  "third_regex"
]

[ns]
# Nameserver port
port = "53"
# Protocol, "both", "both4", "both6", "udp", "udp4", "udp6" or "tcp", "tcp4", "tcp6"
protocol = "both4"
# Default domain used for CNAME targets, SOA records etc.
default_domain = "example.com"
# List of domains that we answer for
domains = [
    "somethingelse.tld",
    "anotherone.tld",
]
# IP address to use in the DNS responses. Should point to the publicly accessible IP of the server
# Should often be the same as the IP in the general section
ns_response_ip = "203.0.113.5"
# Nameserver name used in SOA records
nsname = "ns.example.com"
# Admin email for SOA records, note that @Â is replaced by a dot
nsadmin = "admin.example.com"
records = [
    # Any static records go here in zone file format
    "ns.example.com. A 203.0.113.5",
    # You need to keep the NS records here as well as the A record it points to
    "ns.example.com. NS ns.example.com.",
]
debug = false

# HTTPd configuration
[httpd]
# Port to listen fo plaintext HTTP
http_port = "80"
# Port to listen for HTTPS
https_port = "443"
# Directory path to store injection templates
injection_template_filepath = "/path/to/templates"

# Injection filter regexes for HTTP requests
injection_filters = [
  "first_regex",
  "second_regex",
  "third_regex"
]

# Regexes for request uri elements that we want to inject, mapping to template files.
# when using template files, a keyword CERTAINLY_UPSTREAM will be replaced with the
# upstream response body content. Certainly also generates an unique id for each request
# and replaces keyword CERTAINLY_HASH with it. This is useful for tracking requests.
#
# Certainly has a custom endpoint /callback/ that should be used for any callback requests
# that should be answered with HTTP 204 instead of the default functionality of doing a
# 307 temporary redirect to the upstream server.
[httpd_injection_templates]
  ".js$" = "javascript.tmpl"
  ".css$" = "css.tmpl"

# Rewrite rules for HTTP requests, we don't want to brick the intertubes
[rewrites]
  "example.com" = "realtarget.tld"

[notification]
# Enable slack integration
slack = true
# Slack bot token
slack_token = "xob...."
# List of slack channels to send notifications to
# everything gets sent to default channel unless overwritten by specific channel
slack_default_channel = "C01...."
slack_http_channel    = "" 
slack_dns_channel     = ""
slack_smtp_channel    = ""
slack_imap_channel    = ""
# Enable notifications for HTTP
http = true
# Regex filters to apply on the raw HTTP requests, to filter out spammy requests like scanners
http_filters = [
 "first_regex",
 "second_regex",
 "third_regex"
]
# Enable notifications for DNS
dns = false
# Regex filters to apply on the DNS questions
dns_filters = [
  "first_regex",
  "second_regex"
]
# Enable notifications for SMTP
smtp = true
# regex filters to apply on the SMTP questions
smtp_filters = []
# Enable notifications for IMAP
imap = true
# Regex filters to apply on the IMAP questions
imap_filters = []

[logconfig]
# logging level: "error", "warning", "info" or "debug"
loglevel = "info"
# possible values: stdout, file
logtype = "file"
# file path for logfile
logfile = "/path/to/install/certainly/certainly.log"
# format, either "json" or "text"
logformat = "json"